
õ\í\(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{609:function(s,e,t){"use strict";t.r(e);var a=t(24),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"run-ipfs-inside-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-ipfs-inside-docker"}},[s._v("#")]),s._v(" Run IPFS inside Docker")]),s._v(" "),t("p",[s._v("You can run IPFS inside Docker to simplify your deployment processes, as well as horizontally scale your IPFS infrastructure.")]),s._v(" "),t("h2",{attrs:{id:"set-up"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-up"}},[s._v("#")]),s._v(" Set up")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Grab the IPFS docker image hosted at "),t("a",{attrs:{href:"https://hub.docker.com/r/ipfs/go-ipfs/",target:"_blank",rel:"noopener noreferrer"}},[s._v("hub.docker.com/r/ipfs/go-ipfs"),t("OutboundLink")],1),s._v(".")])]),s._v(" "),t("li",[t("p",[s._v("To make files visible inside the container, you need to mount a host directory with the "),t("code",[s._v("-v")]),s._v(" option to Docker. Choose a directory that you want to use to import and export files from IPFS. You should also choose a directory to store IPFS files that will persist when you restart the container.")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ipfs_staging")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/absolute/path/to/somewhere/"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ipfs_data")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("/absolute/path/to/somewhere_else/"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Start a container running ipfs and expose ports "),t("code",[s._v("4001")]),s._v(", "),t("code",[s._v("5001")]),s._v(" and "),t("code",[s._v("8080")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name ipfs_host -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_staging")]),s._v(":/export -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_data")]),s._v(":/data/ipfs -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001/udp -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:8080:8080 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:5001:5001 ipfs/go-ipfs:latest\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Watch the ipfs log:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs -f ipfs_host\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Wait for IPFS to start:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("Gateway "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("readonly"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" server\nlistening on /ip4/0.0.0.0/tcp/8080\n")])])]),t("p",[s._v("You can now stop watching the log.")])]),s._v(" "),t("li",[t("p",[s._v("Run IPFS commands with "),t("code",[s._v("docker exec ipfs_host ipfs <args...>")]),s._v(". For example:")]),s._v(" "),t("p",[s._v("To connect to peers:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" ipfs_host ipfs swarm peers\n")])])]),t("p",[s._v("To add files:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("something"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_staging")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" ipfs_host ipfs "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -r /export/"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("something"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("Stop the running container:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stop ipfs_host\n")])])])])]),s._v(" "),t("p",[s._v("When starting a container running ipfs for the first time with an empty data directory, it will call "),t("code",[s._v("ipfs init")]),s._v(" to initialize configuration files and generate a new keypair. At this time, you can choose which profile to apply using the "),t("code",[s._v("IPFS_PROFILE")]),s._v(" environment variable:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name ipfs_host -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("IPFS_PROFILE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("server -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_staging")]),s._v(":/export -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_data")]),s._v(":/data/ipfs -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001/udp -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:8080:8080 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:5001:5001 ipfs/go-ipfs:latest\n")])])]),t("h2",{attrs:{id:"private-swarms-inside-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#private-swarms-inside-docker"}},[s._v("#")]),s._v(" Private swarms inside Docker")]),s._v(" "),t("p",[s._v("It is possible to initialize the container with a swarm key file ("),t("code",[s._v("/data/ipfs/swarm.key")]),s._v(") using the variables "),t("code",[s._v("IPFS_SWARM_KEY")]),s._v(" and "),t("code",[s._v("IPFS_SWARM_KEY_FILE")]),s._v(". The "),t("code",[s._v("IPFS_SWARM_KEY")]),s._v(" creates "),t("code",[s._v("swarm.key")]),s._v(" with the contents of the variable itself, while "),t("code",[s._v("IPFS_SWARM_KEY_FILE")]),s._v(" copies the key from a path stored in the variable. The "),t("code",[s._v("IPFS_SWARM_KEY_FILE")]),s._v(" "),t("strong",[s._v("overwrites")]),s._v(" the key generated by "),t("code",[s._v("IPFS_SWARM_KEY")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name ipfs_host -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("IPFS_SWARM_KEY")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("your swarm key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_staging")]),s._v(":/export -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_data")]),s._v(":/data/ipfs -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001/udp -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:8080:8080 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:5001:5001 ipfs/go-ipfs:latest\n")])])]),t("p",[s._v("The swarm key initialization can also be done using docker secrets, and requires "),t("code",[s._v("docker swarm")]),s._v(" or "),t("code",[s._v("docker-compose")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" your_swarm.key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" secret create swarm_key_secret -\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name ipfs_host --secret swarm_key_secret -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("IPFS_SWARM_KEY_FILE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/run/secrets/swarm_key_secret -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_staging")]),s._v(":/export -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ipfs_data")]),s._v(":/data/ipfs -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4001")]),s._v(":4001/udp -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:8080:8080 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:5001:5001 ipfs/go-ipfs:latest\n")])])]),t("h2",{attrs:{id:"key-rotation-inside-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key-rotation-inside-docker"}},[s._v("#")]),s._v(" Key rotation inside Docker")]),s._v(" "),t("p",[s._v("It is possible to do key rotation in an ephemeral container that is temporarily executing against a volume that is mounted under "),t("code",[s._v("/data/ipfs")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# given container named 'ipfs-test' that persists repo at /path/to/persisted/.ipfs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name ipfs-test -v /path/to/persisted/.ipfs:/data/ipfs ipfs/go-ipfs:v0.7.0 \n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stop ipfs-test  \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key rotation works like this (old key saved under 'old-self')")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run --rm -it -v /path/to/persisted/.ipfs:/data/ipfs ipfs/go-ipfs:v0.7.0 key rotate -o old-self -t ed25519\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" start ipfs-test "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will start with the new key")]),s._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);í\