
Ê,Â,(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{603:function(t,s,e){"use strict";e.r(s);var a=e(24),o=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"modify-the-bootstrap-peers-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modify-the-bootstrap-peers-list"}},[t._v("#")]),t._v(" Modify the bootstrap peers list")]),t._v(" "),e("p",[t._v("The IPFS bootstrap list is a list of peers with which the IPFS daemon learns about other peers on the network. IPFS comes with a default list of trusted peers, but you are free to modify the list to suit your needs. One popular use for a custom bootstrap list is to create a personal IPFS network.")]),t._v(" "),e("p",[t._v("First, let's list your node's bootstrap list:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("ipfs bootstrap list\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /ip4/104.131.131.82/tcp/4001/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ\n")])])]),e("p",[t._v("The lines listed above are the addresses of the default IPFS bootstrap nodes â€” they are run by the IPFS development team. The addresses listed are fully resolved and specified in "),e("a",{attrs:{href:"https://github.com/multiformats/multiaddr",target:"_blank",rel:"noopener noreferrer"}},[t._v("multiaddr"),e("OutboundLink")],1),t._v(" format, which makes every protocol explicit. This way, your node knows exactly where to reach the bootstrap nodes â€” the location is unambiguous.")]),t._v(" "),e("p",[t._v("Don't change this list unless you understand what it means to do so. Bootstrapping is an important security point of failure in distributed systems: malicious bootstrap peers could only introduce you to other malicious peers. It is recommended to keep the default list provided by the IPFS dev team, or â€” in the case of setting up private networks â€” a list of nodes you control. Don't add peers to this list that you don't trust.")]),t._v(" "),e("p",[t._v("Here, we add a new peer to the bootstrap list:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs bootstrap "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" /ip4/25.196.147.100/tcp/4001/p2p/QmaMqSwWShsPg2RbredZtoneFjXhim7AQkqbLxib45Lx4S\n")])])]),e("p",[t._v("Here, we remove a node from the bootstrap list:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs bootstrap "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" /ip4/104.131.131.82/tcp/4001/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ\n")])])]),e("p",[t._v("Let's say we want to create a backup of our new bootstrap list. We can easily do this by redirecting stdout of "),e("code",[t._v("ipfs bootstrap list")]),t._v(" to a file:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs bootstrap list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("save\n")])])]),e("p",[t._v("If we ever want to start from scratch, we can delete the entire bootstrap list at once:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs bootstrap "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --all\n")])])]),e("p",[t._v("With an empty list, we can restore the default bootstrap list:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs bootstrap "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --default\n")])])]),e("p",[t._v("Remove the entire bootstrap list again, and restore our saved one by piping the contents of the saved file to "),e("code",[t._v("ipfs bootstrap add")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs bootstrap "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --all\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" save "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ipfs bootstrap "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=o.exports}}]);Â,