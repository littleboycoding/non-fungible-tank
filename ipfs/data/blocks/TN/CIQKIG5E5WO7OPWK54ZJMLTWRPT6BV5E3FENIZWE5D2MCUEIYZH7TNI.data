
ґȑ(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{450:function(t,e,s){t.exports=s.p+"assets/img/goal.ef3425fc.png"},451:function(t,e,s){t.exports=s.p+"assets/img/connect-1.20764d05.png"},452:function(t,e,s){t.exports=s.p+"assets/img/connect-2.b0a188a5.png"},453:function(t,e,s){t.exports=s.p+"assets/img/fetch.34963981.png"},454:function(t,e,s){t.exports=s.p+"assets/img/pubsub.d5780405.png"},597:function(t,e,s){"use strict";s.r(e);var a=s(24),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"exchange-files-between-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exchange-files-between-nodes"}},[t._v("#")]),t._v(" Exchange files between nodes")]),t._v(" "),a("p",[t._v("This tutorial aims to create a simple application with an IPFS node that dials to other instances using WebRTC, and at the same time, dial and transfer files from a browser IPFS node using WebSockets as the transport.")]),t._v(" "),a("p",[t._v("As "),a("code",[t._v("js-ipfs@0.41.x")]),t._v(" currently doesn't support DHT peer discovery, the peer from which you are fetching data should be within reach (local or in public IP) of the browser node. That being said, we explain how to circumvent these caveats in this tutorial, and once they are fixed, we'll update everything here.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("┌──────────────┐                ┌──────────────┐\n│   Browser    │ libp2p(WebRTC) │   Browser    │\n│              │◀──────────────▶│              │\n└──────────────┘                └──────────────┘\n       ▲                                  ▲\n       │WebSockets              WebSockets│\n       │        ┌──────────────┐          │\n       │        │   Desktop    │          │\n       └───────▶│   Terminal   │◀─────────┘\n                └──────────────┘\n")])])]),a("p",[t._v("Here's what we are going to be doing:")]),t._v(" "),a("ol",[a("li",[t._v("Install an IPFS node in your machine.")]),t._v(" "),a("li",[t._v("Make your daemons listen on WebSockets.")]),t._v(" "),a("li",[t._v("Start a "),a("code",[t._v("libp2p-webrtc-star")]),t._v(" signaling server.")]),t._v(" "),a("li",[t._v("Start the app.")]),t._v(" "),a("li",[t._v("Connect to a node using WebSockets.")]),t._v(" "),a("li",[t._v("Transfer files between all of your nodes!")])]),t._v(" "),a("p",[t._v("At the end of the tutorial you should have something that looks like this:")]),t._v(" "),a("p",[a("img",{attrs:{src:s(450),alt:"Web browser showing the final product of this tutorial.",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[t._v("#")]),t._v(" Prerequisites")]),t._v(" "),a("p",[t._v("You must have the following installed:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NPM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.npmjs.com/package/bundle-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bundle"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/install/"}},[t._v("IPFS")])],1)]),t._v(" "),a("h2",{attrs:{id:"set-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-up"}},[t._v("#")]),t._v(" Set up")]),t._v(" "),a("p",[t._v("Before we get stared, you'll need to download the JS-IPFS project repo, install the dependencies, and build the project.")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Download the project repository:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/ipfs/js-ipfs.git\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Move into the "),a("code",[t._v("js-ipfs")]),t._v(" folder and install the dependencies:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" js-ipfs\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Build the project:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run bundle\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"make-your-daemons-listen-on-websockets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-your-daemons-listen-on-websockets"}},[t._v("#")]),t._v(" Make your daemons listen on WebSockets")]),t._v(" "),a("p",[t._v("Now you need to edit your "),a("code",[t._v("config")]),t._v(" file, the one you just set up with "),a("code",[t._v("{js}ipfs init")]),t._v(". It should be in either "),a("code",[t._v("~/.jsipfs/config")]),t._v(" or "),a("code",[t._v("~/.ipfs/config")]),t._v(", depending on whether you're using JS or Go.")]),t._v(" "),a("p",[a("strong",[t._v("Note:")]),t._v(" "),a("code",[t._v("js-ipfs")]),t._v(" sets up a websocket listener by default, so if you're using the JS implementation you can skip this and just start the daemon.")]),t._v(" "),a("p",[t._v("Since websockets support is currently not on by default, you'll need to add a WebSockets address manually. Look into your config file to find the "),a("code",[t._v("Addresses")]),t._v(" section:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Addresses"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Swarm"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/0.0.0.0/tcp/4002"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"API"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/5002"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Gateway"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/9090"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Add the "),a("code",[t._v("/ip4/127.0.0.1/tcp/4003/ws")]),t._v(" entry to your "),a("code",[t._v("Swarm")]),t._v(" array. Now it should look like this:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Addresses"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Swarm"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/0.0.0.0/tcp/4002"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/4003/ws"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"API"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/5002"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Gateway"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/9090"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Save the file and it should be able to listen on Websockets. We're ready to start the daemon.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs daemon\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" jsipfs daemon\n")])])]),a("p",[t._v("You should see the Websocket address in the output:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("Initializing daemon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nSwarm listening on /ip4/127.0.0.1/tcp/4001\nSwarm listening on /ip4/127.0.0.1/tcp/4003/ws\nSwarm listening on /ip4/192.168.10.38/tcp/4001\nSwarm listening on /ip4/192.168.10.38/tcp/4003/ws\nAPI server listening on /ip4/127.0.0.1/tcp/5001\nGateway "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readonly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" server listening on /ip4/0.0.0.0/tcp/8080\nDaemon is ready\n")])])]),a("p",[t._v("Check the "),a("code",[t._v("/ws")]),t._v(" in line 5, that means it is listening. Cool.")]),t._v(" "),a("h3",{attrs:{id:"_3-start-the-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-start-the-app"}},[t._v("#")]),t._v(" 3. Start the app")]),t._v(" "),a("p",[t._v("Make sure you're in "),a("code",[t._v("js-ipfs/examples/exchange-files-in-browser")]),t._v(".")]),t._v(" "),a("p",[t._v("We'll need to bundle the dependencies to run the app. Let's do it:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run bundle\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" start\n")])])]),a("p",[t._v("You should see something like this if all went well:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("Starting up http-server, serving public\nAvailable on:\n  http://127.0.0.1:12345\n  http://192.168.2.92:12345\nHit CTRL-C to stop the server\n")])])]),a("p",[t._v("Now go to http://127.0.0.1:12345 in a modern browser and you're on!")]),t._v(" "),a("h3",{attrs:{id:"_4-dial-to-a-node-using-websockets-your-desktop-ones"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-dial-to-a-node-using-websockets-your-desktop-ones"}},[t._v("#")]),t._v(" 4. Dial to a node using WebSockets (your desktop ones)")]),t._v(" "),a("p",[t._v("Make sure you have a daemon running. If you don't, run:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs daemon\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" jsipfs daemon\n")])])]),a("p",[t._v("Open another terminal window to find the websocket addresses that it is listening on:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" jsipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n")])])]),a("p",[t._v("It should look like this: "),a("code",[t._v("/ip4/127.0.0.1/tcp/4003/ws/ipfs/<your_peer_id>")]),t._v(".")]),t._v(" "),a("p",[t._v("Copy and paste the "),a("em",[t._v("multiaddr")]),t._v(" to connect to that peer:")]),t._v(" "),a("p",[a("img",{attrs:{src:s(451),alt:"Screenshot of interface for connecting to peer",loading:"lazy"}})]),t._v(" "),a("p",[t._v("Check that you got connected:")]),t._v(" "),a("p",[a("img",{attrs:{src:s(452),alt:"Screenshot of successful peer connection",loading:"lazy"}})]),t._v(" "),a("blockquote",[a("p",[t._v("It only works on localhost environments because of a restriction with WebCrypto where it will not load in a page unless that page is loaded over https, or the page is served from localhost: "),a("a",{attrs:{href:"https://github.com/libp2p/js-libp2p-crypto/issues/105",target:"_blank",rel:"noopener noreferrer"}},[t._v("libp2p/js-libp2p-crypto#105"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"_5-transfer-files-between-all-of-your-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-transfer-files-between-all-of-your-nodes"}},[t._v("#")]),t._v(" 5. Transfer files between all of your nodes!")]),t._v(" "),a("p",[t._v("Now you can add files through the CLI with:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" jsipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Copy and paste the "),a("em",[t._v("multihash")]),t._v(" and fetch the file in the browser!")]),t._v(" "),a("p",[a("img",{attrs:{src:s(453),alt:"Screenshot of fetch interface",loading:"lazy"}})]),t._v(" "),a("p",[t._v("You can also open two browser tabs, drag and drop files in one of them, and fetch them in the other!")]),t._v(" "),a("p",[t._v("But the coolest thing about this tutorial is "),a("code",[t._v("pubsub")]),t._v("! You can open two tabs that will share files through workspaces named after the url. Try opening two tabs with the following url:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("http://127.0.0.1:12345/#file-exchange\n# You can substitute `file-exchange` with anything you like, just make sure the two tabs are in the same workspace.\n")])])]),a("p",[t._v("Now every file that you upload in one tab will appear in the other! You can even open a new tab in that workspace and it will sync the files that were added before!")]),t._v(" "),a("p",[a("img",{attrs:{src:s(454),alt:"Screenshot of pubsub files interface",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"going-to-production"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#going-to-production"}},[t._v("#")]),t._v(" Going to production?")]),t._v(" "),a("p",[t._v("This example uses public webrtc-star servers. These servers should be used for experimenting and demos, they "),a("strong",[t._v("MUST NOT")]),t._v(" be used in production as there is no guarantee on availability.")]),t._v(" "),a("h3",{attrs:{id:"use-your-own-libp2p-webrtc-star-signaling-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-your-own-libp2p-webrtc-star-signaling-server"}},[t._v("#")]),t._v(" Use your own "),a("code",[t._v("libp2p-webrtc-star")]),t._v(" signaling server")]),t._v(" "),a("p",[t._v("This server allows the two browser nodes to talk to each other by doing the initial handshake and network introductions.")]),t._v(" "),a("p",[t._v("First install the "),a("code",[t._v("libp2p-webrtc-star")]),t._v(" module globally:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g libp2p-webrtc-star\n")])])]),a("p",[t._v("This will give you the "),a("code",[t._v("webrtc-star")]),t._v(" command. Use this to start a signaling server:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" webrtc-star\n")])])]),a("p",[t._v("By default it will listen to all incoming connections on port 13579. Override this with the "),a("code",[t._v("--host")]),t._v(" and/or "),a("code",[t._v("--port")]),t._v(" options. That is, the following multiaddr: "),a("code",[t._v("/ip4/127.0.0.1/tcp/13579/wss/p2p-webrtc-star")]),t._v(".")]),t._v(" "),a("p",[t._v("You should add your signaling server in the IPFS config swarm addresses, so that you listen for new connections through it.")])])}),[],!1,null,null,null);e.default=n.exports}}]);ȑ