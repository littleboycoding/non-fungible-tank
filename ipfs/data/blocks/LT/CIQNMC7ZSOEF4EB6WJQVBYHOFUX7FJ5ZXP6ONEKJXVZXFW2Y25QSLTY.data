
§2Ÿ2(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{619:function(t,e,a){"use strict";a.r(e);var s=a(24),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"work-with-blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#work-with-blocks"}},[t._v("#")]),t._v(" Work with blocks")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("ipfs add")]),t._v(" command will create a Merkle DAG out of the data in the files you specify. It follows the "),a("a",{attrs:{href:"https://github.com/ipfs/go-unixfs/blob/master/pb/unixfs.proto",target:"_blank",rel:"noopener noreferrer"}},[t._v("UnixFS data format"),a("OutboundLink")],1),t._v(" when doing this. This means that your files are broken down into blocks, and then arranged in a tree-like structure using 'link nodes' to tie them together. A given file's 'hash' is actually the hash of the root (uppermost) node in the DAG. For a given DAG, you can easily view the sub-blocks under it with "),a("code",[t._v("ipfs ls")]),t._v(".")]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Ensure this file is larger than 256k.")]),t._v("\nipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" alargefile\nipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" thathash\n")])])]),a("p",[t._v("The above command should print out something like:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ipfs@earth ~"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ipfs "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" qmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7866189")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" qmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7866189")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" qmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7866189")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" qmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7866189")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" qmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5244129")]),t._v("\n")])])]),a("p",[t._v("This shows all of the immediate sub-blocks of your file, as well as the size of them and their children on the disk.")]),t._v(" "),a("h2",{attrs:{id:"what-to-do-with-blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-to-do-with-blocks"}},[t._v("#")]),t._v(" What to do with blocks")]),t._v(" "),a("p",[t._v("If you feel adventurous, you can get a lot of different information out of these different blocks. You can use the sub-block hashes as input to "),a("code",[t._v("ipfs cat")]),t._v(" to see only the data in any given sub-tree (the data of that block and its children). To see just the data of a given block and not its children, use "),a("code",[t._v("ipfs block get")]),t._v(". But be careful, as "),a("code",[t._v("ipfs block get")]),t._v(" on an intermediate block will print out the raw binary data of its DAG structure to your screen.")]),t._v(" "),a("p",[t._v("The command "),a("code",[t._v("ipfs block stat")]),t._v(" will tell you the exact size of a given block (without its children), and "),a("code",[t._v("ipfs refs")]),t._v(" will tell you all the children of that block. Similarly, "),a("code",[t._v("ipfs ls")]),t._v(" or "),a("code",[t._v("ipfs object links")]),t._v(" will show you all children and their sizes. "),a("code",[t._v("ipfs refs")]),t._v(" is a more suitable command for scripting something to run on each child block of a given object.")]),t._v(" "),a("h2",{attrs:{id:"blocks-vs-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blocks-vs-objects"}},[t._v("#")]),t._v(" Blocks vs objects")]),t._v(" "),a("p",[t._v("In IPFS, a block refers to a single unit of data, identified by its key (hash). A block can be any sort of data, and does not necessarily have any sort of format associated with it. An object, on the other hand, refers to a block that follows the Merkle DAG protobuf data format. It can be parsed and manipulated via the "),a("code",[t._v("ipfs object")]),t._v(" command. Any given hash may represent an object or a block.")]),t._v(" "),a("h2",{attrs:{id:"create-a-block-from-scratch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-block-from-scratch"}},[t._v("#")]),t._v(" Create a block from scratch")]),t._v(" "),a("p",[t._v("Creating your own blocks is easy! Simply put your data in a file and run "),a("code",[t._v("ipfs block put <yourfile>")]),t._v(" on it. Or you can pipe your file data into "),a("code",[t._v("ipfs block put")]),t._v(", like so:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is some data"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ipfs block put\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" QmfQ5QAjvg4GtA3wg3adpnDJug8ktA1BxurVqBD8rtgVjM\n\nipfs block get QmfQ5QAjvg4GtA3wg3adpnDJug8ktA1BxurVqBD8rtgVjM\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" This is some data\n")])])]),a("p",[t._v("Note: When making your own block data, you won't be able to read the data with "),a("code",[t._v("ipfs cat")]),t._v(". This is because you are inputting raw data without the UnixFS data format. To read raw blocks, use "),a("code",[t._v("ipfs block get")]),t._v(" as shown in the example.")])])}),[],!1,null,null,null);e.default=o.exports}}]);Ÿ2