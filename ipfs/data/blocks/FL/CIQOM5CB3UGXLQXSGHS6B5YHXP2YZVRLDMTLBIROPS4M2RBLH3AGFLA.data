
͑Ñ(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{599:function(e,t,s){"use strict";s.r(t);var a=s(24),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"configure-a-default-profile-and-switching-between-profiles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-a-default-profile-and-switching-between-profiles"}},[e._v("#")]),e._v(" Configure a default profile and switching between profiles")]),e._v(" "),s("p",[e._v("The profile of your IPFS node allows you to specify which file-system or data-store you want to use. Changing these options will affect the performance of your node. For example, if you want to have a faster datastore for your node, you can use the "),s("code",[e._v("badgerds")]),e._v(" profile. If you're running your node on a low-power device like a Raspberry Pi, you can use the "),s("code",[e._v("lowpower")]),e._v(" profile. Profiles have been developed to customize your IPFS node to perform best under given conditions.")]),e._v(" "),s("h2",{attrs:{id:"find-your-current-profile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#find-your-current-profile"}},[e._v("#")]),e._v(" Find your current profile")]),e._v(" "),s("p",[e._v("Your IPFS profile is found within your node's "),s("code",[e._v("config")]),e._v(" file. The default location for the "),s("code",[e._v("config")]),e._v(" file is "),s("code",[e._v("~/.ipfs/config")]),e._v(". If you have set an "),s("code",[e._v("$IPFS_PATH")]),e._v(" variable, you can find your "),s("code",[e._v("config")]),e._v(" file at "),s("code",[e._v("$IPFS_PATH/config")]),e._v(". Use "),s("code",[e._v("grep")]),e._v(" to find the currently set profile:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" ~/.ipfs/config "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"prefix"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"prefix"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"flatfs.datastore"')]),e._v(",\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"prefix"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"leveldb.datastore"')]),e._v(",\n")])])]),s("p",[e._v("IPFS uses the "),s("code",[e._v("flatfs")]),e._v(" profile by default, which in turn uses LevelDB internally. That's why you see "),s("code",[e._v("leveldb.datastore")]),e._v(" in the command output, even though both prefixes refer to the "),s("code",[e._v("flatfs")]),e._v(" datastore in this case.")]),e._v(" "),s("p",[e._v("If you previously configured your IPFS node to use another profile, let's say "),s("code",[e._v("badgerds")]),e._v(", the above command output would be slightly different:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"prefix"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"badger.datastore"')]),e._v(",\n")])])]),s("h2",{attrs:{id:"available-profiles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-profiles"}},[e._v("#")]),e._v(" Available profiles")]),e._v(" "),s("p",[e._v("Here's a list of all the profiles available for your IPFS node. You can also find them documented in "),s("code",[e._v("ipfs config profile --help")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"available-only-when-initializing-the-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-only-when-initializing-the-node"}},[e._v("#")]),e._v(" Available only when initializing the node")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("flatfs")]),s("br"),e._v("\n  Configures the node to use the flatfs datastore.")])]),e._v(" "),s("p",[e._v("This is the most battle-tested and reliable datastore, but it's significantly slower than the badger datastore.")]),e._v(" "),s("p",[e._v("Use this datastore if:")]),e._v(" "),s("p",[e._v("- You need a very simple and very reliable datastore you and trust your filesystem. This datastore stores each block as a separate file in the underlying filesystem, so it's unlikely to lose data, unless there's an issue with the underlying file system."),s("br"),e._v("\n  - You need to run garbage collection on a small (<= 10GiB) datastore. The default datastore, badger, can leave several gigabytes of data behind when garbage collecting."),s("br"),e._v("\n  - You're concerned about memory usage. In its default configuration, badger can use up to several gigabytes of memory.")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("badgerds")]),s("br"),e._v("\n  Configures the node to use the badger datastore.")])]),e._v(" "),s("p",[e._v("This is the fastest datastore. Use this datastore if performance, especially when adding many gigabytes of files, is critical.")]),e._v(" "),s("p",[e._v("However, this datastore will not properly reclaim space when your datastore is smaller than several gigabytes. If you run IPFS with '--enable-gc' (you have enabled block-level garbage collection), you plan on storing very little data in"),s("br"),e._v("\n  your IPFS node, and disk usage is more critical than performance, consider using"),s("br"),e._v(" "),s("code",[e._v("flatfs")]),e._v(".")]),e._v(" "),s("p",[e._v("This datastore uses up to several gigabytes of memory.")]),e._v(" "),s("h3",{attrs:{id:"available-at-any-time"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-at-any-time"}},[e._v("#")]),e._v(" Available at any time")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("default-datastore")]),s("br"),e._v("\n  Restores the default datastore (flatfs).")])]),e._v(" "),s("p",[e._v("Read the "),s("code",[e._v("flatfs")]),e._v(" profile description for more information on this datastore.")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("server")]),s("br"),e._v("\n  Disables local host discovery, recommended when running IPFS on machines with public IPv4 addresses.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("local-discovery")]),s("br"),e._v("\n  Sets default values to fields affected by the server profile, enables discovery in local networks.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("randomports")]),s("br"),e._v("\n  Uses a random port number for swarm.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("test")]),s("br"),e._v("\n  Reduces external interference of IPFS daemon. Useful when using the daemon in test environments.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("default-networking")]),s("br"),e._v("\n  Restores default network settings. Inverse profile of the test profile.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("lowpower")]),s("br"),e._v("\n  Reduces daemon overhead on the system. May degrade performance of content discovery and data fetching.")])])]),e._v(" "),s("h2",{attrs:{id:"reset-your-profile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reset-your-profile"}},[e._v("#")]),e._v(" Reset your profile")]),e._v(" "),s("p",[e._v("To reset the profile of your node to default, run the following command:")]),e._v(" "),s("div",{staticClass:"language-diff extra-class"},[s("pre",{pre:!0,attrs:{class:"language-diff"}},[s("code",[e._v('ipfs config profile apply default-datastore\n\n...\n"Datastore": {\n'),s("span",{pre:!0,attrs:{class:"token unchanged"}},[s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('   "BloomFilterSize": 0,\n')]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('   "GCPeriod": "1h",\n')]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('   "HashOnRead": false,\n')]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('   "Spec": {\n')])]),s("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[s("span",{pre:!0,attrs:{class:"token prefix deleted"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('       >> "child": {"path":"badgerds","syncWrites":false,"truncate":true,"type":"badgerds"},\n')])]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[s("span",{pre:!0,attrs:{class:"token prefix inserted"}},[e._v("+")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('       << "mounts": [{"child":{"path":"blocks","shardFunc":"/repo/flatfs/shard/v1/next-to-last/2","sync":true,"type":"flatfs"},"mountpoint":"/blocks","prefix":"flatfs.datastore","type":"measure"},{"child":{"compression":"none","path":"datastore","type":"levelds"},"mountpoint":"/","prefix":"leveldb.datastore","type":"measure"}],\n')])]),s("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[s("span",{pre:!0,attrs:{class:"token prefix deleted"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('       >> "prefix": "badger.datastore",\n')])]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('       <> "type": "measure"\n')]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('       ** "type": "mount"\n')]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v("   },\n")]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('   "StorageGCWatermark": 90,\n')]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[e._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[e._v('   "StorageMax": "10GB"\n')])]),e._v("},\n...\n")])])]),s("p",[e._v("The above command shows the difference between your existing IPFS configuration and the new configuration. It will overwrite your IPFS "),s("code",[e._v("config")]),e._v(" file, so be sure to create a backup of your existing IPFS configuration before running this command.")]),e._v(" "),s("h2",{attrs:{id:"converting-profiles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#converting-profiles"}},[e._v("#")]),e._v(" Converting profiles")]),e._v(" "),s("p",[e._v("Not all profiles are compatible with each other, because they may use different technologies for storing the data inside the datastores. For instance, if you want to convert "),s("code",[e._v("badgerds")]),e._v(" to "),s("code",[e._v("default-datastore")]),e._v(", you have to use another helper tool called "),s("a",{attrs:{href:"https://dist.ipfs.io/#ipfs-ds-convert",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipfs-ds-convert"),s("OutboundLink")],1),e._v(" to convert the datastore to the required format. Please follow the instructions given below to install "),s("code",[e._v("ipfs-ds-convert")]),e._v(" for your operating system.")]),e._v(" "),s("h3",{attrs:{id:"macos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[e._v("#")]),e._v(" MacOS")]),e._v(" "),s("p",[e._v("Download the tarball for MacOS, extract the contents, and move the binary file to your path:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" -O /tmp/ipfs-ds-convert.tar.gz https://dist.ipfs.io/ipfs-ds-convert/v0.5.0/ipfs-ds-convert_v0.5.0_darwin-amd64.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" -xzvf /tmp/ipfs-ds-convert.tar.gz -C /usr/local/bin/ --strip-components"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/ipfs-ds-convert\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" /tmp/ipfs-ds-convert.tar.gz\n")])])]),s("h3",{attrs:{id:"linux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[e._v("#")]),e._v(" Linux")]),e._v(" "),s("p",[e._v("Download the tarball for Linux, extract the contents, and move the binary file to your path:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" -O /tmp/ipfs-ds-convert.tar.gz https://dist.ipfs.io/ipfs-ds-convert/v0.5.0/ipfs-ds-convert_v0.5.0_linux-amd64.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" -xzvf /tmp/ipfs-ds-convert.tar.gz -C /usr/local/bin/ --strip-components"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/ipfs-ds-convert\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" /tmp/ipfs-ds-convert.tar.gz\n")])])]),s("h3",{attrs:{id:"windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[e._v("#")]),e._v(" Windows")]),e._v(" "),s("p",[e._v("Download the zip file, extract it and then add the path to "),s("code",[e._v("ipfs-ds-convert.exe")]),e._v(" to your environment path:")]),e._v(" "),s("ul",[s("li",[e._v("Download the zip package from here: "),s("a",{attrs:{href:"https://dist.ipfs.io/ipfs-ds-convert/v0.5.0/ipfs-ds-convert_v0.5.0_windows-amd64.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipfs-ds-convert"),s("OutboundLink")],1),e._v(" and extract it.")]),e._v(" "),s("li",[e._v("Add the full path to "),s("code",[e._v("ipfs-ds-convert.exe")]),e._v(" to your environment variables path.")])]),e._v(" "),s("p",[e._v("To find more about "),s("code",[e._v("ipfs-ds-convert")]),e._v(" please visit here: "),s("a",{attrs:{href:"https://dist.ipfs.io/#ipfs-ds-convert",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipfs-ds-convert"),s("OutboundLink")],1),e._v("."),s("br"),e._v("\nOnce you are done with the installation process, verify that "),s("code",[e._v("ipfs-ds-convert")]),e._v(" has been installed successfully by executing the following command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("ipfs-ds-convert --version\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ipfs-ds-convert version "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.5")]),e._v(".0\n")])])]),s("p",[e._v("If the above command does not display a similar output, that means there is some issue with the installation. The most common issue is that the path to the executable binary is not in your environment path.")]),e._v(" "),s("p",[e._v("On the other hand, if the command executes successfully, then proceed to convert your IPFS profile. Run the following command to begin the process of converting your existing datastore to the required format:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("ipfs-ds-convert convert\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":27:26 Checks OK\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":27:27 Copying keys, this can take a long "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("time")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" copied "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2002")]),e._v(" keys\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":29:01 All data copied, swapping repo\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":29:02 Verifying key integrity\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":29:02 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2002")]),e._v(" keys OK\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":29:02 Saving new spec\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" convert "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("/12/06 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(":29:02 All tasks finished\n")])])]),s("p",[e._v("This can take a very long time to complete. If you are running this on a headless server we recommend you use something like "),s("code",[e._v("screen")]),e._v(" or "),s("code",[e._v("tmux")]),e._v(" to run this command in a persistent shell.")]),e._v(" "),s("p",[e._v("After the above command finishes, your IPFS node should be reset to the default profile.")])])}),[],!1,null,null,null);t.default=n.exports}}]);Ñ