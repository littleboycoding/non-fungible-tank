
¢œ˜œ(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{577:function(e,t,a){"use strict";a.r(t);var r=a(24),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"ipfs-glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipfs-glossary"}},[e._v("#")]),e._v(" IPFS glossary")]),e._v(" "),a("p",[a("a",{attrs:{href:"#a"}},[e._v("A")]),e._v(" "),a("a",{attrs:{href:"#b"}},[e._v("B")]),e._v(" "),a("a",{attrs:{href:"#c"}},[e._v("C")]),e._v(" "),a("a",{attrs:{href:"#d"}},[e._v("D")]),e._v(" "),a("a",{attrs:{href:"#e"}},[e._v("E")]),e._v(" "),a("a",{attrs:{href:"#f"}},[e._v("F")]),e._v(" "),a("a",{attrs:{href:"#g"}},[e._v("G")]),e._v(" "),a("a",{attrs:{href:"#h"}},[e._v("H")]),e._v(" "),a("a",{attrs:{href:"#i"}},[e._v("I")]),e._v(" "),a("a",{attrs:{href:"#j"}},[e._v("J")]),e._v(" "),a("a",{attrs:{href:"#k"}},[e._v("K")]),e._v(" "),a("a",{attrs:{href:"#l"}},[e._v("L")]),e._v(" "),a("a",{attrs:{href:"#m"}},[e._v("M")]),e._v(" "),a("a",{attrs:{href:"#n"}},[e._v("N")]),e._v(" "),a("a",{attrs:{href:"#o"}},[e._v("O")]),e._v(" "),a("a",{attrs:{href:"#p"}},[e._v("P")]),e._v(" "),a("a",{attrs:{href:"#q"}},[e._v("Q")]),e._v(" "),a("a",{attrs:{href:"#r"}},[e._v("R")]),e._v(" "),a("a",{attrs:{href:"#s"}},[e._v("S")]),e._v(" "),a("a",{attrs:{href:"#t"}},[e._v("T")]),e._v(" "),a("a",{attrs:{href:"#u"}},[e._v("U")]),e._v(" "),a("a",{attrs:{href:"#v"}},[e._v("V")]),e._v(" "),a("a",{attrs:{href:"#w"}},[e._v("W")]),e._v(" "),a("a",{attrs:{href:"#x"}},[e._v("X")]),e._v(" "),a("a",{attrs:{href:"#y"}},[e._v("Y")]),e._v(" "),a("a",{attrs:{href:"#z"}},[e._v("Z")])]),e._v(" "),a("h2",{attrs:{id:"a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a"}},[e._v("#")]),e._v(" A")]),e._v(" "),a("h3",{attrs:{id:"acl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acl"}},[e._v("#")]),e._v(" ACL")]),e._v(" "),a("p",[e._v("In computer security, an access-control list (ACL) is a list of permissions associated with a system resource, also known as an "),a("em",[e._v("object")]),e._v(". An ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Access-control_list",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about ACL"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"adl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adl"}},[e._v("#")]),e._v(" ADL")]),e._v(" "),a("p",[e._v("ADL is short for "),a("em",[e._v("Advanced Data Layout")]),e._v(", a concept in "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(". See "),a("a",{attrs:{href:"https://ipld.io/glossary/#adl",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD docs"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"announcing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#announcing"}},[e._v("#")]),e._v(" Announcing")]),e._v(" "),a("p",[e._v("Announcing is a function of the IPFS networking layer in "),a("a",{attrs:{href:"#libp2p"}},[e._v("libp2p")]),e._v(", wherein a peer can tell other peers that it has data blocks available.")]),e._v(" "),a("h3",{attrs:{id:"autonat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autonat"}},[e._v("#")]),e._v(" AutoNAT")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"#libp2p"}},[e._v("libp2p")]),e._v(" protocol that allows a "),a("a",{attrs:{href:"#peer"}},[e._v("peer")]),e._v(" to determine if it is located behind a "),a("a",{attrs:{href:"#nat"}},[e._v("Network address translator (NAT)")]),e._v(". "),a("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/autonat/#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about AutoNAT"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b"}},[e._v("#")]),e._v(" B")]),e._v(" "),a("h3",{attrs:{id:"base32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base32"}},[e._v("#")]),e._v(" Base32")]),e._v(" "),a("p",[e._v("Case-insensitive "),a("a",{attrs:{href:"#multibase"}},[e._v("Multibase")]),e._v(" encoding used for text representation of "),a("a",{attrs:{href:"#cid-v1"}},[e._v("CIDv1")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"base36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base36"}},[e._v("#")]),e._v(" Base36")]),e._v(" "),a("p",[e._v("Case-insensitive "),a("a",{attrs:{href:"#multibase"}},[e._v("Multibase")]),e._v(" used for text representation of "),a("a",{attrs:{href:"#cid-v1"}},[e._v("CIDv1")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"base58btc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base58btc"}},[e._v("#")]),e._v(" Base58btc")]),e._v(" "),a("p",[e._v("Case-sensitive "),a("a",{attrs:{href:"#multibase"}},[e._v("Multibase")]),e._v(" used for text representation "),a("a",{attrs:{href:"#multihash"}},[e._v("Multihashes")]),e._v(" and "),a("a",{attrs:{href:"#cid-v0"}},[e._v("CIDv0")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"base64url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base64url"}},[e._v("#")]),e._v(" Base64url")]),e._v(" "),a("p",[e._v("Case-sensitive "),a("a",{attrs:{href:"#multibase"}},[e._v("Multibase")]),e._v(", uses modified Base64 with URL and filename safe alphabet ("),a("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/rfc4648#section-5",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 4648"),a("OutboundLink")],1),e._v("), where the "),a("code",[e._v("+")]),e._v(" and "),a("code",[e._v("/")]),e._v("  are respectively replaced by "),a("code",[e._v("-")]),e._v(" and "),a("code",[e._v("_")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"bitswap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitswap"}},[e._v("#")]),e._v(" Bitswap")]),e._v(" "),a("p",[e._v("Bitswap is IPFS's central block exchange protocol. Its purpose is to request blocks from and send blocks to other peers in the network. "),a("a",{attrs:{href:"https://github.com/ipfs/specs/blob/master/BITSWAP.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Bitswap"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"bittorrent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bittorrent"}},[e._v("#")]),e._v(" BitTorrent")]),e._v(" "),a("p",[e._v("BitTorrent is a communication protocol for peer-to-peer file sharing, which is used to distribute data and electronic files over the Internet. Also, the first file-sharing application to use the protocol. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/BitTorrent",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about BitTorrent protocol"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://www.bittorrent.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("BitTorrent app"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"blockchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockchain"}},[e._v("#")]),e._v(" Blockchain")]),e._v(" "),a("p",[e._v("A Blockchain is a growing list of records, known as blocks, that are linked using cryptography. Each block contains a cryptographic hash of the previous block, a timestamp, and transaction data (generally represented as a Merkle tree). "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Blockchain",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Blockchain"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block"}},[e._v("#")]),e._v(" Block")]),e._v(" "),a("p",[e._v("A Block is a binary blob of data identified by a "),a("a",{attrs:{href:"#cid"}},[e._v("CID")]),e._v(". It could be raw bytes of arbitrary data or a chunk of serialized binary data encoded with "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(" "),a("a",{attrs:{href:"#codec"}},[e._v("codec")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"bootstrap-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap-node"}},[e._v("#")]),e._v(" Bootstrap node")]),e._v(" "),a("p",[e._v("A Bootstrap Node is a trusted peer on the IPFS network through which an IPFS node learns about other peers on the network. Both go-ipfs and js-ipfs use bootstrap nodes to enter the Distributed Hash Table (DHT). See "),a("RouterLink",{attrs:{to:"/concepts/nodes/#bootstrap"}},[e._v("Bootstrap")])],1),e._v(" "),a("h2",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[e._v("#")]),e._v(" C")]),e._v(" "),a("h3",{attrs:{id:"cbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cbor"}},[e._v("#")]),e._v(" CBOR")]),e._v(" "),a("p",[e._v("The Concise Binary Object Representation (CBOR) is a data format based on "),a("a",{attrs:{href:"#json"}},[e._v("JSON")]),e._v(", featuring small code and message size, and extensibility. Used within "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(". "),a("a",{attrs:{href:"http://cbor.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about CBOR"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"cid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cid"}},[e._v("#")]),e._v(" CID")]),e._v(" "),a("p",[e._v("A Content Identifier (CID) is a self-describing content-addressed label used to point to the data stored in IPFS. It is the core identifier used for IPFS and "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(". "),a("RouterLink",{attrs:{to:"/concepts/content-addressing/"}},[e._v("More about CID")])],1),e._v(" "),a("h3",{attrs:{id:"cid-v0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cid-v0"}},[e._v("#")]),e._v(" CID v0")]),e._v(" "),a("p",[e._v('Version 0 (v0) of the IPFS content identifier. This CID is 46 characters in length, starting with "Qm". Uses a base 58-encoded multihash, very simple but much less flexible than newer CIDs. '),a("RouterLink",{attrs:{to:"/concepts/content-addressing/#version-0-v0"}},[e._v("More about CID v0")])],1),e._v(" "),a("h3",{attrs:{id:"cid-v1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cid-v1"}},[e._v("#")]),e._v(" CID v1")]),e._v(" "),a("p",[e._v("Version 1 (v1) of the IPFS content identifier. This CID version contains some leading identifiers which provide for forward-compatibility. Able to support different formats for future versions of CID. "),a("RouterLink",{attrs:{to:"/concepts/content-addressing/#version-1-v1"}},[e._v("More about CID v1")])],1),e._v(" "),a("h3",{attrs:{id:"circuit-relay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#circuit-relay"}},[e._v("#")]),e._v(" Circuit relay")]),e._v(" "),a("p",[e._v("A "),a("a",{attrs:{href:"#libp2p"}},[e._v("libp2p")]),e._v(" term for transport protocol that routes traffic between two peers over a third-party "),a("a",{attrs:{href:"#relay"}},[a("em",[e._v("relay")]),e._v(" peer")]),e._v(". "),a("a",{attrs:{href:"https://docs.libp2p.io/concepts/circuit-relay/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Circuit Relay"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"circuit-relay-v1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#circuit-relay-v1"}},[e._v("#")]),e._v(" Circuit relay v1")]),e._v(" "),a("p",[e._v("Unlimited relay that requires some external ACL to control resource usage. "),a("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/relay/circuit-v1.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("See specification"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"circuit-relay-v2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#circuit-relay-v2"}},[e._v("#")]),e._v(" Circuit relay v2")]),e._v(" "),a("p",[e._v("Truly decentralized relay implementation that provides a limited relay for things like "),a("a",{attrs:{href:"#hole-punching"}},[e._v("hole punching")]),e._v(". Support for this type of relay was introduced in go-ipfs 0.11. "),a("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/relay/circuit-v2.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("See specification"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"codec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codec"}},[e._v("#")]),e._v(" Codec")]),e._v(" "),a("p",[e._v("A function that encodes or decodes serial data into and from some data model. In IPFS, we use an agreed-upon codec table implemented as part of "),a("a",{attrs:{href:"#multicodec"}},[e._v("Multicodec")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"content-addressing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content-addressing"}},[e._v("#")]),e._v(" Content addressing")]),e._v(" "),a("p",[e._v("A way to store information so a device can retrieve the data based on its content, not its location. "),a("RouterLink",{attrs:{to:"/concepts/how-ipfs-works/#content-addressing"}},[e._v("Learn how IPFS uses content addressing")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"crdt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crdt"}},[e._v("#")]),e._v(" CRDT")]),e._v(" "),a("p",[e._v("A Conflict-Free Replicated Data Type (CRDT) is a type of specially-designed data structure used to achieve strong eventual consistency (SEC) and monotonicity (absence of rollbacks). "),a("a",{attrs:{href:"https://github.com/ipfs/research-CRDT",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about CRDT"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d"}},[e._v("#")]),e._v(" D")]),e._v(" "),a("h3",{attrs:{id:"daemon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daemon"}},[e._v("#")]),e._v(" Daemon")]),e._v(" "),a("p",[e._v("A Daemon is a computer program that typically runs in the background. The IPFS daemon is how you take your node online to the IPFS network. "),a("RouterLink",{attrs:{to:"/how-to/command-line-quick-start/#take-your-node-online"}},[e._v("More about IPFS Daemon")])],1),e._v(" "),a("h3",{attrs:{id:"dag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dag"}},[e._v("#")]),e._v(" DAG")]),e._v(" "),a("p",[e._v("A Directed Acyclic Graph (DAG) is a computer science data structure adapted for use with versioned file systems, blockchains, and for modeling many different kinds of information. "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(" data in IPFS is naturally a DAG. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Directed_acyclic_graph",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DAG on Wikipedia"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"dag-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dag-json"}},[e._v("#")]),e._v(" DAG-JSON")]),e._v(" "),a("p",[e._v("DAG-JSON is a "),a("a",{attrs:{href:"#codec"}},[e._v("codec")]),e._v(" that implements the "),a("a",{attrs:{href:"https://ipld.io/glossary/#data-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD Data Model"),a("OutboundLink")],1),e._v(' as JSON, plus some additional conventions for encoding links, which it does by claiming certain specific structures of map and assigning them this meaning. DAG-CBOR also adds a "link" type using a CBOR tag, to bring it in line with the IPLD Data Model. '),a("a",{attrs:{href:"https://ipld.io/docs/codecs/known/dag-json/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DAG-JSON"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"dag-jose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dag-jose"}},[e._v("#")]),e._v(" DAG-JOSE")]),e._v(" "),a("p",[e._v("DAG-JOSE is a "),a("a",{attrs:{href:"#codec"}},[e._v("codec")]),e._v(" that defines CBOR serialization for JOSE, a standard for signing and encrypting objects. "),a("a",{attrs:{href:"https://ipld.io/specs/codecs/dag-jose/spec/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More in DAG-JOSE specification"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"dag-cbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dag-cbor"}},[e._v("#")]),e._v(" DAG-CBOR")]),e._v(" "),a("p",[e._v("DAG-CBOR is a "),a("a",{attrs:{href:"#codec"}},[e._v("codec")]),e._v(" that implements the "),a("a",{attrs:{href:"https://ipld.io/glossary/#data-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD Data Model"),a("OutboundLink")],1),e._v(' as a subset of CBOR, plus some additional constraints for hash consistent representations. DAG-CBOR also adds a "link" type using a CBOR tag, to bring it in line with the IPLD Data Model. '),a("a",{attrs:{href:"https://ipld.io/docs/codecs/known/dag-cbor/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DAG-CBOR"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"dag-pb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dag-pb"}},[e._v("#")]),e._v(" DAG-PB")]),e._v(" "),a("p",[e._v("DAG-PB is a "),a("a",{attrs:{href:"#codec"}},[e._v("codec")]),e._v(" that implements a very small subset of the "),a("a",{attrs:{href:"https://ipld.io/glossary/#data-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD Data Model"),a("OutboundLink")],1),e._v(" in a particular set of "),a("a",{attrs:{href:"#protobuf"}},[e._v("Protobuf")]),e._v(" messages used in IPFS for defining how "),a("a",{attrs:{href:"#UnixFS"}},[e._v("UnixFS")]),e._v("v1 data is serialized. "),a("a",{attrs:{href:"https://ipld.io/specs/codecs/dag-pb/spec/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DAG-PB"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"data-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-model"}},[e._v("#")]),e._v(" Data model")]),e._v(" "),a("p",[e._v("Did you mean "),a("a",{attrs:{href:"https://ipld.io/glossary/#data-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD Data Model"),a("OutboundLink")],1),e._v("?")]),e._v(" "),a("h3",{attrs:{id:"datastore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#datastore"}},[e._v("#")]),e._v(" DataStore")]),e._v(" "),a("p",[e._v("The Datastore is the on-disk storage system used by an IPFS node. Configuration parameters control the location, size, construction, and operation of the datastore. "),a("a",{attrs:{href:"https://github.com/ipfs/go-ipfs/blob/master/docs/config.md#datastore",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Datastore"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"dcutr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dcutr"}},[e._v("#")]),e._v(" DCUtR")]),e._v(" "),a("p",[e._v("Direct Connection Upgrade through Relay (DCUtR) protocol enables "),a("a",{attrs:{href:"#hole-punching"}},[e._v("hole punching")]),e._v(" for NAT traversal when port forwarding is not possible. A peer will coordinate with the counterparty using a "),a("a",{attrs:{href:"#circuit-relay-v2"}},[e._v("relayed connection")]),e._v(", to upgrade to a direct connection through a NAT/firewall whenever possible. "),a("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/relay/DCUtR.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DCUtR"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"delegate-routing-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delegate-routing-node"}},[e._v("#")]),e._v(" Delegate routing node")]),e._v(" "),a("p",[e._v("GO-IPFS nodes with their API ports exposed and some HTTP API commands accessible. JS-IPFS nodes use them to query the DHT and also publish content without having to actually run DHT logic on their own. See "),a("RouterLink",{attrs:{to:"/concepts/nodes/#types"}},[e._v("Delegate routing")])],1),e._v(" "),a("h3",{attrs:{id:"dht"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dht"}},[e._v("#")]),e._v(" DHT")]),e._v(" "),a("p",[e._v("A "),a("em",[e._v("Distributed Hash Table")]),e._v(" (DHT) is a distributed key-value store where keys are cryptographic hashes. In IPFS, each peer is responsible for a subset of the IPFS DHT. "),a("RouterLink",{attrs:{to:"/concepts/dht/"}},[e._v("More about DHT")])],1),e._v(" "),a("h3",{attrs:{id:"dmt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dmt"}},[e._v("#")]),e._v(" DMT")]),e._v(" "),a("p",[e._v("Short for "),a("em",[e._v("Data Model Tree")]),e._v(", a term coined by the IPLD team. "),a("a",{attrs:{href:"https://ipld.io/glossary/#dmt",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DMT in IPLD docs"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"dialing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dialing"}},[e._v("#")]),e._v(" Dialing")]),e._v(" "),a("p",[e._v("Dialing is a function of the IPFS networking layer in "),a("a",{attrs:{href:"#libp2p"}},[e._v("libp2p")]),e._v(", wherein a connection is opened to another peer. Together, an implementation of dialing and "),a("a",{attrs:{href:"#listening"}},[e._v("listening")]),e._v(" forms a "),a("a",{attrs:{href:"#transport"}},[e._v("transport")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"dnslink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dnslink"}},[e._v("#")]),e._v(" DNSLink")]),e._v(" "),a("p",[e._v("DNSLink is a protocol to link content and services directly from DNS. A DNSLink address looks like an IPNS address, but it uses a domain name instead of a hashed public key, like "),a("code",[e._v("/ipns/en.wikipedia-on-ipfs.org")]),e._v(". "),a("a",{attrs:{href:"https://dnslink.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about DNSLink"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"dweb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dweb"}},[e._v("#")]),e._v(" DWeb")]),e._v(" "),a("p",[e._v("The Decentralized Web (DWeb) looks like today's World Wide Web, but it is built with new underlying technologies that support decentralization. It is much harder for any single entity (like a government or terrorist group) to take down any single webpage, website, or service, either by accident or on purpose.")]),e._v(" "),a("h2",{attrs:{id:"e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#e"}},[e._v("#")]),e._v(" E")]),e._v(" "),a("h2",{attrs:{id:"f"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#f"}},[e._v("#")]),e._v(" F")]),e._v(" "),a("h3",{attrs:{id:"filestore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filestore"}},[e._v("#")]),e._v(" Filestore")]),e._v(" "),a("p",[e._v("An experimental data store used when "),a("code",[e._v("--nocopy")]),e._v(" is passed to "),a("code",[e._v("ipfs add")]),e._v(". It stores the "),a("a",{attrs:{href:"#unixfs"}},[e._v("UnixFS")]),e._v(" data components of blocks as files on the file system instead of as blocks. This allows adding content to IPFS without duplicating the content in the IPFS datastore. "),a("a",{attrs:{href:"https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#ipfs-filestore",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Filestore experiment"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"g"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g"}},[e._v("#")]),e._v(" G")]),e._v(" "),a("h3",{attrs:{id:"gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway"}},[e._v("#")]),e._v(" Gateway")]),e._v(" "),a("p",[e._v("An IPFS Gateway acts as a bridge between traditional web browsers and IPFS. Through the gateway, users can browse files and websites stored in IPFS as if they were stored on a traditional web server. "),a("a",{attrs:{href:"https://github.com/ipfs/go-ipfs/blob/master/docs/gateway.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Gateway"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"garbage-collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#garbage-collection"}},[e._v("#")]),e._v(" Garbage Collection")]),e._v(" "),a("p",[e._v("Garbage Collection (GC) is the process within each IPFS node of clearing out cached files and blocks. Nodes need to clear out previously cached resources to make room for new resources. "),a("a",{attrs:{href:"#pinning"}},[e._v("Pinned resources")]),e._v(" are never deleted.")]),e._v(" "),a("h3",{attrs:{id:"go-ipfs-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-ipfs-node"}},[e._v("#")]),e._v(" GO-IPFS node")]),e._v(" "),a("p",[e._v("The primary IPFS reference implementation, i.e., implements all requirements from the corresponding IPFS specification. It runs on servers and user machines with full IPFS capabilities, enabling experimentation. See "),a("RouterLink",{attrs:{to:"/concepts/nodes/#go-ipfs"}},[e._v("Nodes > GO-IPFS")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"graph"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graph"}},[e._v("#")]),e._v(" Graph")]),e._v(" "),a("p",[e._v("In computer science, a Graph is an abstract data type from the field of graph theory within mathematics. The "),a("a",{attrs:{href:"#merkledag"}},[e._v("Merkle-DAG")]),e._v(" used in IPFS is a specialized graph.")]),e._v(" "),a("h3",{attrs:{id:"graphsync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphsync"}},[e._v("#")]),e._v(" Graphsync")]),e._v(" "),a("p",[e._v("Graphsync is an alternative content replication protocol under discussion, similar to "),a("a",{attrs:{href:"#bitswap"}},[e._v("Bitswap")]),e._v(". Like Bitswap, the primary job is to synchronize data blocks across peers. "),a("a",{attrs:{href:"https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Graphsync"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[e._v("#")]),e._v(" H")]),e._v(" "),a("h3",{attrs:{id:"hamt-sharding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hamt-sharding"}},[e._v("#")]),e._v(" HAMT-sharding")]),e._v(" "),a("p",[e._v("The sharding technique used for "),a("a",{attrs:{href:"#sharding"}},[e._v("sharding")]),e._v(" big UnixFS directories. It leverages properties of hash array mapped tries (HAMT). "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hash_array_mapped_trie",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about HAMT"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[e._v("#")]),e._v(" Hash")]),e._v(" "),a("p",[e._v("A Cryptographic Hash is a function that takes some arbitrary input (content) and returns a fixed-length value. The exact same input data will always generate the same hash as output. There are numerous hash algorithms. "),a("RouterLink",{attrs:{to:"/concepts/hashing/"}},[e._v("More about Hash")])],1),e._v(" "),a("h3",{attrs:{id:"hole-punching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hole-punching"}},[e._v("#")]),e._v(" Hole punching")]),e._v(" "),a("p",[e._v("A  technique for "),a("a",{attrs:{href:"#nat"}},[e._v("NAT")]),e._v(" or firewall traversal that relies on coordinated simultaneous connections.  Used when port forwarding is not possible. "),a("a",{attrs:{href:"#dcutr"}},[e._v("See DCUtR")])]),e._v(" "),a("h2",{attrs:{id:"i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i"}},[e._v("#")]),e._v(" I")]),e._v(" "),a("h3",{attrs:{id:"information-space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#information-space"}},[e._v("#")]),e._v(" Information Space")]),e._v(" "),a("p",[e._v("Information Space is the set of concepts, and relations among them, held by an information system. This can be thought of as a conceptual framework or tool for studying how knowledge and information are codified, abstracted, and diffused through a social system. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Information_space",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Information Space"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipld"}},[e._v("#")]),e._v(" IPLD")]),e._v(" "),a("p",[e._v("The InterPlanetary Linked Data (IPLD) model is a set of specifications in support of decentralized data structures for the content-addressable web. Key features are interoperable protocols, easily upgradeable, backward compatible. A single namespace for all hash-based protocols. "),a("a",{attrs:{href:"https://ipld.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about IPLD"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"ipns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipns"}},[e._v("#")]),e._v(" IPNS")]),e._v(" "),a("p",[e._v("The InterPlanetary Name System (IPNS) is a system for creating and updating mutable links to IPFS content. IPNS allows for publishing the latest version of any IPFS content, even though the underlying IPFS hash has changed. "),a("RouterLink",{attrs:{to:"/concepts/ipns/"}},[e._v("More about IPNS")])],1),e._v(" "),a("h2",{attrs:{id:"j"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#j"}},[e._v("#")]),e._v(" J")]),e._v(" "),a("h3",{attrs:{id:"js-ipfs-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-ipfs-node"}},[e._v("#")]),e._v(" JS-IPFS node")]),e._v(" "),a("ul",[a("li",[e._v("Runs in the browser with a limited set of capabilities. See "),a("RouterLink",{attrs:{to:"/concepts/nodes/#implementations"}},[e._v("Nodes > JS-IPFS")]),e._v(".")],1)]),e._v(" "),a("h3",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[e._v("#")]),e._v(" JSON")]),e._v(" "),a("p",[e._v("JavaScript Object Notation (JSON) is a lightweight data-interchange format. JSON is a text format that is completely language independent, human-readable, and easy to parse and generate. "),a("a",{attrs:{href:"https://www.json.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about JSON"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k"}},[e._v("#")]),e._v(" K")]),e._v(" "),a("h2",{attrs:{id:"l"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#l"}},[e._v("#")]),e._v(" L")]),e._v(" "),a("h3",{attrs:{id:"lan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lan"}},[e._v("#")]),e._v(" LAN")]),e._v(" "),a("p",[e._v("Local Area Network (LAN) is a type of (usually private) computer network that covers a limited area. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Local_area_network",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about LAN"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"leaf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leaf"}},[e._v("#")]),e._v(" Leaf")]),e._v(" "),a("p",[e._v("A Leaf is a node of a graph that doesn't link to any other node. This is opposed to a "),a("a",{attrs:{href:"#root"}},[e._v("root")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"libp2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libp2p"}},[e._v("#")]),e._v(" libp2p")]),e._v(" "),a("p",[e._v("The libp2p project is a modular system of protocols, specifications, and libraries that enable the development of peer-to-peer network applications. It is an essential component of IPFS. "),a("a",{attrs:{href:"https://libp2p.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about libp2p"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"listening"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listening"}},[e._v("#")]),e._v(" Listening")]),e._v(" "),a("p",[e._v("Listening is a function of the IPFS networking layer in libp2p, wherein an incoming connection is accepted from another peer. Together, an implementation of "),a("a",{attrs:{href:"#dialing"}},[e._v("dialing")]),e._v(" and listening forms a "),a("a",{attrs:{href:"#transport"}},[e._v("transport")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[e._v("#")]),e._v(" Link")]),e._v(" "),a("p",[e._v("In IPFS and "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(", a "),a("em",[e._v("link")]),e._v(" usually means a pointer to some "),a("a",{attrs:{href:"#cid"}},[e._v("CID")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"m"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#m"}},[e._v("#")]),e._v(" M")]),e._v(" "),a("h3",{attrs:{id:"merkle-dag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merkle-dag"}},[e._v("#")]),e._v(" Merkle-DAG")]),e._v(" "),a("p",[e._v("The Merkle-DAG is a computer science data structure used at the core of IPFS files/block storage. Merkle-DAGs create a hash to their content, known as a "),a("a",{attrs:{href:"#cid"}},[e._v("Content Identifier")]),e._v(". "),a("RouterLink",{attrs:{to:"/concepts/merkle-dag/"}},[e._v("More about Merkle-DAG")])],1),e._v(" "),a("h3",{attrs:{id:"merkle-forest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merkle-forest"}},[e._v("#")]),e._v(" Merkle Forest")]),e._v(" "),a("p",[e._v("Merkle Forest is a phrase coined to describe the distributed, authenticated, hash-linked data structures (Merkle trees) running technologies like Bitcoin, Ethereum, git, and BitTorrent. In this way, IPFS is a forest of linked Merkle trees. "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=Bqs_LzBjQyk",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Merkle Forest"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"merkle-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merkle-tree"}},[e._v("#")]),e._v(" Merkle Tree")]),e._v(" "),a("p",[e._v("A Merkle Tree is a specific type of hash tree used in cryptography and computer science, allowing efficient and secure verification of the contents of large data structures. Named after Ralph Merkle, who patented it in 1979. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Merkle_tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Merkle Tree"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"mfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mfs"}},[e._v("#")]),e._v(" MFS")]),e._v(" "),a("p",[e._v("The Mutable File System (MFS) is a tool built into IPFS that lets you treat files like a normal name-based filesystem. You may add, edit, and remove MFS files while all link updates and hashes are taken care of for you. "),a("RouterLink",{attrs:{to:"/concepts/file-systems/#mutable-file-system-mfs"}},[e._v("More about MFS")])],1),e._v(" "),a("h3",{attrs:{id:"multiaddr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiaddr"}},[e._v("#")]),e._v(" Multiaddr")]),e._v(" "),a("p",[e._v("Multiaddr is a way to create self-describing, composable and future-proof network addresses. In "),a("a",{attrs:{href:"#libp2p"}},[e._v("libp2p")]),e._v(", it is used in "),a("a",{attrs:{href:"#peer"}},[e._v("peer")]),e._v(" addressing. "),a("a",{attrs:{href:"https://github.com/multiformats/multiaddr",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Multiaddr"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"multibase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multibase"}},[e._v("#")]),e._v(" Multibase")]),e._v(" "),a("p",[e._v("Multibase is a protocol for disambiguating the encoding of base-encoded (e.g. base32, base36, base64, base58, etc.) binary appearing in text. In IPFS, it is used as a prefix specifying the encoding used for the remainder of the CID. "),a("a",{attrs:{href:"https://github.com/multiformats/multibase#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Multibase"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"multicodec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multicodec"}},[e._v("#")]),e._v(" Multicodec")]),e._v(" "),a("p",[e._v("Multicodec is an identifier indicating the format of the target content. It helps people and software know how to interpret that content after it has been fetched. In IPFS, it is backed by an agreed-upon "),a("a",{attrs:{href:"#codec"}},[e._v("codec")]),e._v(" table. Multicodecs are designed for use in binary representations, such as keys or identifiers (i.e. "),a("a",{attrs:{href:"#cid"}},[e._v("CIDv1")]),e._v("). "),a("a",{attrs:{href:"https://github.com/multiformats/multicodec#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Multicodec"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"multihash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multihash"}},[e._v("#")]),e._v(" Multihash")]),e._v(" "),a("p",[e._v("Multihash is a protocol for differentiating outputs from various well-established hash functions, addressing size and encoding considerations. It is useful to write applications that future-proof their use of hashes, and it allows multiple hash functions to coexist. "),a("a",{attrs:{href:"https://multiformats.io/multihash/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Multihash"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"multiformats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiformats"}},[e._v("#")]),e._v(" Multiformats")]),e._v(" "),a("p",[e._v("The Multiformats project is a collection of protocols that aim to future-proof systems today. A key element is enhancing format values with self-description. This allows for interoperability, protocol agility, and promotes extensibility. "),a("a",{attrs:{href:"https://multiformats.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Multiformats"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://multiformats.io/multihash/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Multihash"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#n"}},[e._v("#")]),e._v(" N")]),e._v(" "),a("h3",{attrs:{id:"nat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nat"}},[e._v("#")]),e._v(" NAT")]),e._v(" "),a("p",[e._v("Network Address Translation (NAT) enables communication between two networks by mapping IP addresses from one to another. Many consumer routers provide NAT service to allow multiple devices in local network ("),a("a",{attrs:{href:"#lan"}},[e._v("LAN")]),e._v(") to access the internet ("),a("a",{attrs:{href:"#wan"}},[e._v("WAN")]),e._v(") through a single public IP address. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Network_address_translation",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about NAT"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" Node")]),e._v(" "),a("p",[e._v("In IPFS, a node or "),a("a",{attrs:{href:"#peer"}},[e._v("peer")]),e._v(" is the IPFS program that you run on your local computer to store files and then connect to the IPFS network. See "),a("RouterLink",{attrs:{to:"/concepts/nodes/#nodes"}},[e._v("Nodes")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"node-in-graphs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-in-graphs"}},[e._v("#")]),e._v(" Node (in graphs)")]),e._v(" "),a("p",[e._v("In an IPLD "),a("a",{attrs:{href:"#graph"}},[e._v("graph")]),e._v(" context, a node is a point that may be linked to by other nodes using edges or links.")]),e._v(" "),a("p",[e._v("For example, in a family tree each person is a "),a("em",[e._v("node")]),e._v(", while each branch connecting one person to another is an "),a("em",[e._v("edge")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o"}},[e._v("#")]),e._v(" O")]),e._v(" "),a("h2",{attrs:{id:"p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p"}},[e._v("#")]),e._v(" P")]),e._v(" "),a("h3",{attrs:{id:"path-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-address"}},[e._v("#")]),e._v(" Path/Address")]),e._v(" "),a("p",[e._v("A Path/Address is the method within IPFS of referencing content on the web. Addresses for content are path-like; they are components separated by slashes. "),a("RouterLink",{attrs:{to:"/how-to/address-ipfs-on-web/"}},[e._v("More about Path/Address")])],1),e._v(" "),a("h3",{attrs:{id:"peer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer"}},[e._v("#")]),e._v(" Peer")]),e._v(" "),a("p",[e._v("In system architecture, a Peer is an equal player in the peer-to-peer model of decentralization, as opposed to the client-server model of centralization. "),a("a",{attrs:{href:"#node"}},[e._v("See also Peer as Node")])]),e._v(" "),a("h3",{attrs:{id:"peer-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-id"}},[e._v("#")]),e._v(" Peer ID")]),e._v(" "),a("p",[e._v("A Peer ID is how each unique IPFS node is identified on the network. The Peer ID is created when the IPFS node is initialized and is essentially a cryptographic hash of the node's public key. "),a("RouterLink",{attrs:{to:"/concepts/dht/#peer-ids"}},[e._v("More about Peer ID")])],1),e._v(" "),a("h3",{attrs:{id:"pinning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pinning"}},[e._v("#")]),e._v(" Pinning")]),e._v(" "),a("p",[e._v("Pinning is the method of telling an IPFS node that particular data is important and so it will never be removed from that node's cache. To learn more, start by understanding "),a("RouterLink",{attrs:{to:"/concepts/persistence/"}},[e._v("persistence, permanence, and pinning")]),e._v("; then, see how to "),a("RouterLink",{attrs:{to:"/how-to/pin-files/"}},[e._v("add local pin")]),e._v(" and read "),a("a",{attrs:{href:"#remote-pinning"}},[e._v("what remote pins are")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"pinning-service-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pinning-service-api"}},[e._v("#")]),e._v(" Pinning Service API")]),e._v(" "),a("p",[e._v("A vendor-agnostic "),a("a",{attrs:{href:"https://ipfs.github.io/pinning-services-api-spec/",target:"_blank",rel:"noopener noreferrer"}},[e._v("API specification"),a("OutboundLink")],1),e._v(" that anyone can implement to provide a service for "),a("a",{attrs:{href:"#remote-pinning"}},[e._v("remote pinning")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"preload-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preload-node"}},[e._v("#")]),e._v(" Preload node")]),e._v(" "),a("p",[e._v("Part of the process of making a UnixFS DAG publicly available via the preload node's "),a("code",[e._v("wantlist")]),e._v(", causing it to fetch data. Other nodes requesting the content can then resolve it from the preload node using Bitswap, as the data is now present in the preload nodeâ€™s blockstore. See "),a("a",{attrs:{href:"https://docs.ipfs.io/concepts/nodes/#preload",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nodes > Preload"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"protobuf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protobuf"}},[e._v("#")]),e._v(" Protobuf")]),e._v(" "),a("p",[e._v("Protocol Buffers (Protobuf) is a free and open-source cross-platform data format used to serialize structured data. IPFS uses it in "),a("a",{attrs:{href:"#dag-pb"}},[e._v("DAG-PB")]),e._v(". "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Protocol_Buffers",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Protocol Buffers"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"pubsub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pubsub"}},[e._v("#")]),e._v(" Pubsub")]),e._v(" "),a("p",[e._v("Publish-subscribe (Pubsub) is an experimental feature in IPFS. Publishers send messages classified by topic or content, and subscribers receive only the messages they are interested in. "),a("a",{attrs:{href:"https://blog.ipfs.io/25-pubsub/",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Pubsub"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"q"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#q"}},[e._v("#")]),e._v(" Q")]),e._v(" "),a("h2",{attrs:{id:"r"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#r"}},[e._v("#")]),e._v(" R")]),e._v(" "),a("h3",{attrs:{id:"relay-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#relay-node"}},[e._v("#")]),e._v(" Relay node")]),e._v(" "),a("p",[e._v("A means to establish connectivity between libp2p nodes (e.g., IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other. This may be due to nodes that are behind NAT (Network Address Translation), reverse proxies, firewalls, etc. See "),a("RouterLink",{attrs:{to:"/concepts/nodes/#relay"}},[e._v("Nodes > Relay")])],1),e._v(" "),a("h3",{attrs:{id:"remote-pinning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remote-pinning"}},[e._v("#")]),e._v(" Remote Pinning")]),e._v(" "),a("p",[e._v("A variant of "),a("a",{attrs:{href:"#pinning"}},[e._v("pinning")]),e._v(" that uses a third-party service to ensure that data persists on IPFS, even when your local node goes offline or your local copy of data is deleted during garbage collection. "),a("RouterLink",{attrs:{to:"/how-to/work-with-pinning-services/"}},[e._v("More about working with remote pinning services")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"repo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repo"}},[e._v("#")]),e._v(" Repo")]),e._v(" "),a("p",[e._v("The Repository (Repo) is a directory where IPFS stores all its settings and internal data. It is created with the "),a("code",[e._v("ipfs init")]),e._v(" command. "),a("RouterLink",{attrs:{to:"/how-to/command-line-quick-start/#install-ipfs"}},[e._v("More about Repo")])],1),e._v(" "),a("h3",{attrs:{id:"root"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#root"}},[e._v("#")]),e._v(" Root")]),e._v(" "),a("p",[e._v("A root is a "),a("a",{attrs:{href:"#node"}},[e._v("node")]),e._v(" in a "),a("a",{attrs:{href:"#graph"}},[e._v("graph")]),e._v(" that links to at least one other node. In an IPLD graph, roots are used to aggregate multiple chunks of a file together.")]),e._v(" "),a("p",[e._v("If you have a 600MiB file "),a("code",[e._v("A")]),e._v(", it can be split into 3 chunks "),a("code",[e._v("B")]),e._v(", "),a("code",[e._v("C")]),e._v(", and "),a("code",[e._v("D")]),e._v(" since the block size of IPFS is 256MiB. The node "),a("code",[e._v("A")]),e._v(" that links to each of these three chunks is the root. The CID of this root is what IPFS shows you as the CID of the file.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("      A\n      |\n-------------\n|     |     |\nB     C     D\n")])])]),a("h2",{attrs:{id:"s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#s"}},[e._v("#")]),e._v(" S")]),e._v(" "),a("h3",{attrs:{id:"schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schemas"}},[e._v("#")]),e._v(" Schemas")]),e._v(" "),a("p",[e._v("In IPFS, IPLD Schemas are a system for describing data with structural types. "),a("a",{attrs:{href:"https://ipld.io/glossary/#schemas",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about IPLD Schemas"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"selectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selectors"}},[e._v("#")]),e._v(" Selectors")]),e._v(" "),a("p",[e._v("IPLD selectors are a form of graph query over IPLD data. They can also be thought of as a way to specify a "),a("a",{attrs:{href:"#traversal"}},[e._v("traversal")]),e._v(". "),a("a",{attrs:{href:"https://ipld.io/glossary/#selectors",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about IPLD Selectors"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"sfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sfs"}},[e._v("#")]),e._v(" SFS")]),e._v(" "),a("p",[e._v("A Self-certifying File System (SFS) is a distributed file system that doesn't require special permissions for data exchange. It is self-certifying because data served to a client is authenticated by the file name (which is signed by the server). "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Self-certifying_File_System",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about SFS"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"sharding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharding"}},[e._v("#")]),e._v(" Sharding")]),e._v(" "),a("p",[e._v("An introduction of horizontal partition of data in a database or a data structure. The main purpose is to spread load and improve performance. An example of sharding in IPFS is "),a("a",{attrs:{href:"#hamt-sharding"}},[e._v("HAMT-sharding")]),e._v(" of big "),a("a",{attrs:{href:"#unixfs"}},[e._v("UnixFS")]),e._v(" directories.")]),e._v(" "),a("h3",{attrs:{id:"signing-cryptographic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signing-cryptographic"}},[e._v("#")]),e._v(" Signing (Cryptographic)")]),e._v(" "),a("p",[e._v("The signing of data cryptographically allows for trusting of data from untrusted sources. Cryptographically signed values can be passed through an untrusted channel, and any tampering of the data can be detected. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Digital_signature",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about Digital signature"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"substrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#substrate"}},[e._v("#")]),e._v(" Substrate")]),e._v(" "),a("p",[e._v("A vocabulary term in "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(", related to "),a("a",{attrs:{href:"#adl"}},[e._v("ADLs")]),e._v(".  "),a("a",{attrs:{href:"https://ipld.io/glossary/#substrate",target:"_blank",rel:"noopener noreferrer"}},[e._v("More in IPLD glossary"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"swarm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swarm"}},[e._v("#")]),e._v(" Swarm")]),e._v(" "),a("p",[e._v("The Swarm is a term for the network of IPFS peers with which your local node has connections. Swarm addresses are addresses that your local node will listen on for connections from other IPFS peers. "),a("RouterLink",{attrs:{to:"/how-to/configure-node/#addresses"}},[e._v("More about Swarm addresses")])],1),e._v(" "),a("h2",{attrs:{id:"t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t"}},[e._v("#")]),e._v(" T")]),e._v(" "),a("h3",{attrs:{id:"transport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transport"}},[e._v("#")]),e._v(" Transport")]),e._v(" "),a("p",[e._v("In "),a("a",{attrs:{href:"#libp2p"}},[e._v("libp2p")]),e._v(", transport refers to the technology that lets us move data from one machine to another. This may be a TCP network, a WebSocket connection in a browser, or anything else capable of implementing the transport interface.")]),e._v(" "),a("h3",{attrs:{id:"traversal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traversal"}},[e._v("#")]),e._v(" Traversal")]),e._v(" "),a("p",[e._v("In "),a("a",{attrs:{href:"#ipld"}},[e._v("IPLD")]),e._v(", the act of walking across the "),a("a",{attrs:{href:"#data-model"}},[e._v("Data Model")]),e._v(". "),a("a",{attrs:{href:"https://ipld.io/glossary/#substrate",target:"_blank",rel:"noopener noreferrer"}},[e._v("More in IPLD glossary"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"u"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#u"}},[e._v("#")]),e._v(" U")]),e._v(" "),a("h3",{attrs:{id:"unixfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unixfs"}},[e._v("#")]),e._v(" UnixFS")]),e._v(" "),a("p",[e._v("The Unix File System (UnixFS) is the data format used to represent files and all their links and metadata in IPFS. It is loosely based on how files work in Unix. Adding a file to IPFS creates a block, or a "),a("em",[e._v("tree")]),e._v(" of blocks, in the UnixFS format and protects it from being garbage-collected. "),a("RouterLink",{attrs:{to:"/concepts/file-systems/#unix-file-system-unixfs"}},[e._v("More about UnixFS")])],1),e._v(" "),a("h3",{attrs:{id:"urlstore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#urlstore"}},[e._v("#")]),e._v(" Urlstore")]),e._v(" "),a("p",[e._v("An experimental data store similar to "),a("a",{attrs:{href:"#filestore"}},[a("code",[e._v("filestore")])]),e._v(", but it retrieves blocks contents via a HTTP URL instead of a local filesystem. "),a("a",{attrs:{href:"https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#ipfs-urlstore",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about urlstore experiment"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"v"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v"}},[e._v("#")]),e._v(" V")]),e._v(" "),a("h2",{attrs:{id:"w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#w"}},[e._v("#")]),e._v(" W")]),e._v(" "),a("h3",{attrs:{id:"wan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wan"}},[e._v("#")]),e._v(" WAN")]),e._v(" "),a("p",[e._v("Wide Area Network (WAN) is a type of (usually public) computer network that spans over a large geographic area. "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Wide_area_network",target:"_blank",rel:"noopener noreferrer"}},[e._v("More about WAN"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x"}},[e._v("#")]),e._v(" X")]),e._v(" "),a("h2",{attrs:{id:"y"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#y"}},[e._v("#")]),e._v(" Y")]),e._v(" "),a("h2",{attrs:{id:"z"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z"}},[e._v("#")]),e._v(" Z")])])}),[],!1,null,null,null);t.default=s.exports}}]);˜œ