
àÅ˛Ä(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{582:function(e,t,o){"use strict";o.r(t);var n=o(24),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"nodes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodes"}},[e._v("#")]),e._v(" Nodes")]),e._v(" "),o("p",[e._v("Participants in the IPFS network are called "),o("em",[e._v("nodes")]),e._v(". Nodes are an IPFS program that you run on your local computer to store files and connect to the IPFS network. They're the most crucial aspect of IPFS. Without nodes running the IPFS daemon (explained below), there would be no IPFS Network.")]),e._v(" "),o("p",[e._v("You're likely to see the term "),o("em",[e._v("node")]),e._v(" throughout the IPFS docs, issues, and related code. It's a very general term, so its meaning depends on the context. There are three main categories of nodes: IPFS nodes, data nodes, and libp2p nodes for applications.")]),e._v(" "),o("ul",[o("li",[o("p",[o("strong",[e._v("IPFS Nodes")]),e._v(" are programs that run on a computer that can exchange data with other IPFS nodes. They go by several different names, but we refer to them by a different term, depending on the context:")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("node")]),e._v(": Use "),o("em",[e._v("node")]),e._v(" when you're referring to an individual point on the network. It's a very general term. For example, when you open IPFS Desktop, you establish yourself as a node with the potential to interact with other nodes. See "),o("a",{attrs:{href:"https://docs.ipfs.io/how-to/configure-node/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure a node"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[o("em",[e._v("peer")]),e._v(": Use "),o("em",[e._v("peer")]),e._v(" when you're talking about the relationship of one node (even your own) to other nodes. It refers to their relationship as equals, with no central authority, so your node is a peer to other peers. See "),o("RouterLink",{attrs:{to:"/how-to/observe-peers/"}},[e._v("Observe peers")]),e._v(", "),o("RouterLink",{attrs:{to:"/how-to/exchange-files-between-nodes/"}},[e._v("Exchange files between nodes")]),e._v(", and "),o("a",{attrs:{href:"https://docs.ipfs.io/how-to/peering-with-content-providers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Peering with content providers"),o("OutboundLink")],1),e._v(".")],1),e._v(" "),o("li",[o("em",[e._v("daemon")]),e._v(": Use "),o("em",[e._v("daemon")]),e._v(" when talking about a node's activity status. When a node is online and running in the background, listening for requests for its data, it's called a "),o("em",[e._v("daemon")]),e._v(". See "),o("RouterLink",{attrs:{to:"/how-to/command-line-quick-start/#take-your-node-online"}},[e._v("Take your node online")])],1),e._v(" "),o("li",[o("em",[e._v("instance")]),e._v(": Use "),o("em",[e._v("instance")]),e._v(" when talking about a library or program, such as a Go or JS version, running on an IPFS node at a particular point in time. The peer ID is the same, so it's still the same "),o("em",[e._v("node")]),e._v(" as far as the IPFS network is concerned. See "),o("RouterLink",{attrs:{to:"/reference/go/api/"}},[e._v("Go-IPFS")]),e._v(" and "),o("RouterLink",{attrs:{to:"/reference/js/api/#ipfs-and-javascript"}},[e._v("JS-IPFS")]),e._v(".")],1)])]),e._v(" "),o("li",[o("p",[o("strong",[e._v("Data nodes")]),e._v(", Use "),o("em",[e._v("data nodes")]),e._v(" when talking about actual pieces of data on IPFS, such as DAG nodes, UnixFS nodes, and IPLD nodes. When you add a file with the "),o("code",[e._v("ipfs add myfile.txt")]),e._v(" command, IPFS breaks them up into several nodes that each contain a chunk of the file and are linked to each other. See "),o("RouterLink",{attrs:{to:"/concepts/merkle-dag/"}},[e._v("Merkle Directed Acyclic Graphs (DAGs)")]),e._v(", "),o("RouterLink",{attrs:{to:"/concepts/file-systems/#unix-file-system-unixfs"}},[e._v("Unix File System (UnixFS)")]),e._v(", and stay tuned for "),o("RouterLink",{attrs:{to:"/concepts/ipld/"}},[e._v("InterPlanetary Linked Data (IPLD) model")]),e._v(" docs, which is in progress.")],1)]),e._v(" "),o("li",[o("p",[o("strong",[e._v("libp2p peer")]),e._v(" Use "),o("em",[e._v("libp2p peer")]),e._v(" when talking about libp2p nodes on which you can build applications. They're usually referred to as "),o("em",[e._v("peers")]),e._v(" in libp2p, because it provides solutions for essential peer-to-peer elements like transport, security, peer routing, and content discovery. See "),o("RouterLink",{attrs:{to:"/concepts/libp2p/"}},[e._v("concepts")])],1)])]),e._v(" "),o("h2",{attrs:{id:"types"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" Types")]),e._v(" "),o("p",[e._v("There are different types of IPFS nodes. And depending on the use-case, a single IPFS node can serve one of many functions:")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#preload"}},[e._v("Preload")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#relay"}},[e._v("Relay")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#bootstrap"}},[e._v("Bootstrap")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#delegate-routing"}},[e._v("Delegate routing")])])]),e._v(" "),o("h3",{attrs:{id:"preload"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#preload"}},[e._v("#")]),e._v(" Preload")]),e._v(" "),o("p",[e._v("Use to make a UnixFS DAG publicly available by calling "),o("code",[e._v("ipfs refs -r <CID>")]),e._v(" on a randomly chosen preload node's HTTP API. This puts the CID in the preload nodes' wantlist, causing it to fetch the data from the user. Other nodes requesting the content can then resolve it from the preload node using bitswap, as the data is now present in the preload node‚Äôs blockstore.")]),e._v(" "),o("p",[e._v("Features of a preload node:")]),e._v(" "),o("ul",[o("li",[e._v("They are Go-IPFS nodes with API ports exposed. Some HTTP API commands are accessible.")]),e._v(" "),o("li",[e._v("Used by JS-IPFS nodes running in browser contexts.")]),e._v(" "),o("li",[e._v("JS-ipfs nodes remain connected to the libp2p swarm ports of all preload nodes by having preload nodes on the bootstrap list.")]),e._v(" "),o("li",[e._v("Often on the same "),o("em",[e._v("server")]),e._v(" as a "),o("a",{attrs:{href:"#delegate-routing"}},[e._v("delegate routing node")]),e._v(", though both the delegate routing service and preload service are addressed differently. This is done by having different multiaddrs that resolve to the same machine.")]),e._v(" "),o("li",[e._v("Preload nodes are in the default JS-IPFS configuration as bootstrap nodes, so they will maintain libp2p swarm connections to them at all times.\n"),o("ul",[o("li",[e._v("They are configured as regular bootstrap nodes, but as a convention have the string 'preload' in their "),o("code",[e._v("/dnsaddr")]),e._v(" multiaddrs.")])])])]),e._v(" "),o("p",[e._v("Limitations of a preload node:")]),e._v(" "),o("ul",[o("li",[e._v("Default preload nodes provided by Protocol Labs garbage collect every hour, so preloaded content only survives for that long. However, this is configurable. You can run nodes with customized policies.")]),e._v(" "),o("li",[e._v("Requires client to be smart about what gets preloaded: recursive preload of a big DAG.")]),e._v(" "),o("li",[e._v("Only works with dag-pb CIDs because that's all the refs command understands. It's harder to find non-dag-pb content, e.g., you need a connection to the publishing js-ipfs instance or it needs to be put on the DHT by a delegate node.")])]),e._v(" "),o("h3",{attrs:{id:"relay"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#relay"}},[e._v("#")]),e._v(" Relay")]),e._v(" "),o("p",[e._v("If an IPFS node deems itself unreachable by the public internet, IPFS nodes may choose to use a relay node as a kind of VPN in an attempt to reach the unreachable node.")]),e._v(" "),o("p",[e._v("Features of a relay node:")]),e._v(" "),o("ul",[o("li",[e._v("Implements either "),o("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/relay/circuit-v1.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("v1"),o("OutboundLink")],1),e._v(" or "),o("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/relay/circuit-v2.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("v2"),o("OutboundLink")],1),e._v(" of the Circuit Relay protocol.")]),e._v(" "),o("li",[e._v("Can be either Go-IPFS or JS-IPFS nodes; however there are standalone implementations as well:\n"),o("ul",[o("li",[o("a",{attrs:{href:"https://github.com/libp2p/js-libp2p-relay-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("js-libp2p-relay-server"),o("OutboundLink")],1),e._v(" (supports circuit v1)")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/libp2p/go-libp2p-relay-daemon",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-libp2p-relay-daemon"),o("OutboundLink")],1),e._v(" (supports circuit v1 & v2)")])])]),e._v(" "),o("li",[e._v("They're used by both Go-IPFS and JS-IPFS nodes.\n"),o("ul",[o("li",[e._v("JS-IPFS nodes can also use relay nodes to overcome the lack of transport compatibility within the JS-IPFS implementation. A browser node with WebSockets/webRTC transports can talk with a Go-IPFS node that only communicates through TCP using a relay that supports both transports. This is not enabled by default and needs to be set up.")])])])]),e._v(" "),o("p",[e._v("Limitations of relay nodes:")]),e._v(" "),o("ul",[o("li",[e._v("v1 relays can be used by anyone without any limits, unless "),o("a",{attrs:{href:"https://github.com/libp2p/go-libp2p-relay-daemon",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-libp2p-relay-daemon"),o("OutboundLink")],1),e._v(" is used with ACLs (Access Control Lists) set up.")]),e._v(" "),o("li",[e._v('v2 relays are "limited relays" that are designed to be used for '),o("a",{attrs:{href:"https://github.com/libp2p/specs/blob/master/relay/DCUtR.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Direct Connection Upgrade through Relay"),o("OutboundLink")],1),e._v(" (aka hole punching).")]),e._v(" "),o("li",[e._v("Not configurable in go-ipfs; uses a preset list of relays")])]),e._v(" "),o("p",[e._v("See "),o("a",{attrs:{href:"https://github.com/libp2p/specs/tree/master/relay",target:"_blank",rel:"noopener noreferrer"}},[e._v("p2p-circuit relay"),o("OutboundLink")],1)]),e._v(" "),o("h3",{attrs:{id:"bootstrap"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap"}},[e._v("#")]),e._v(" Bootstrap")]),e._v(" "),o("p",[e._v("Both Go-IPFS and JS-IPFS nodes use bootstrap nodes to initially enter the DHT.")]),e._v(" "),o("p",[e._v("Features of a bootstrap node:")]),e._v(" "),o("ul",[o("li",[e._v("All default bootstrap nodes are part of the public DHT.")]),e._v(" "),o("li",[e._v("The list of bootstrap nodes a Go-IPFS or JS-IPFS node connects to is configurable in their config files.")])]),e._v(" "),o("p",[e._v("Limitations of a bootstrap node:")]),e._v(" "),o("ul",[o("li",[e._v("If an IPFS node only has one bootstrap node listed in that configuration and that bootstrap node goes offline, the IPFS node will lose access to the public DHT if it were to restart.")])]),e._v(" "),o("p",[o("RouterLink",{attrs:{to:"/how-to/modify-bootstrap-list/"}},[e._v("More about Bootstrapping")])],1),e._v(" "),o("h3",{attrs:{id:"delegate-routing-node"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#delegate-routing-node"}},[e._v("#")]),e._v(" Delegate routing node")]),e._v(" "),o("p",[e._v("When IPFS nodes are unable to run Distributed Hash Table (DHT) logic on their own, they "),o("em",[e._v("delegate")]),e._v(" the task to a delegate routing node.  Publishing works with arbitrary CID codecs (compression/decompression technology), as the "),o("a",{attrs:{href:"https://github.com/libp2p/js-libp2p-delegated-content-routing/blob/master/src/index.js#L127-L128",target:"_blank",rel:"noopener noreferrer"}},[e._v("js-delegate-content module"),o("OutboundLink")],1),e._v(" publishes CIDs at the block level rather than the IPLD or DAG level.")]),e._v(" "),o("p",[e._v("Features of a delegate routing node:")]),e._v(" "),o("ul",[o("li",[e._v("They are Go-IPFS nodes with their API ports exposed and some API commands accessible under "),o("code",[e._v("/api/v0")]),e._v(".")]),e._v(" "),o("li",[e._v("Usable by both Go-IPFS and JS-IPFS nodes.")]),e._v(" "),o("li",[e._v("JS-IPFS nodes use them to query the DHT and also publish content without having to actually run DHT logic on their own.")]),e._v(" "),o("li",[e._v("Often on the same "),o("em",[e._v("server")]),e._v(" as a "),o("a",{attrs:{href:"#preload"}},[e._v("preload")]),e._v(" node, though both the delegate routing service and preload service are addressed differently. This is done by having different multiaddrs that resolve to the same machine.")]),e._v(" "),o("li",[e._v("Delegate routing nodes are in the default JS-IPFS configuration as bootstrap nodes, so they will maintain libp2p swarm connections to them at all times.")]),e._v(" "),o("li",[e._v("They are configured as regular bootstrap nodes, but have the string 'preload' in their multiaddrs.")])]),e._v(" "),o("p",[e._v("Limitations of a delegate routing node:")]),e._v(" "),o("ul",[o("li",[e._v("On default delegate nodes provided by Protocol Labs, the garbage collection happens every hour, so provided content only survives for that long. If the uploading JS-IPFS node is still running, it will issue periodic re-provides using the same publishing mechanic, which extends the life of the content on the DHT.")])]),e._v(" "),o("h2",{attrs:{id:"implementations"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#implementations"}},[e._v("#")]),e._v(" Implementations")]),e._v(" "),o("p",[e._v("Protocol Labs manages two primary implementations of the IPFS spec: Go-IPFS and JS-IPFS. These implementations use specific types of nodes to perform server, browser, and other client functions.")]),e._v(" "),o("h3",{attrs:{id:"go-ipfs"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#go-ipfs"}},[e._v("#")]),e._v(" Go-IPFS")]),e._v(" "),o("p",[e._v("The Go implementation is designed to run on servers and user machines with full IPFS capabilities, enabling experimentation. New IPFS features are usually created on Go-IPFS before any other implementation.")]),e._v(" "),o("p",[e._v("Features include:")]),e._v(" "),o("ul",[o("li",[e._v("TCP and QUIC transports are enabled by default.")]),e._v(" "),o("li",[o("code",[e._v("/ws/")]),e._v(" transport disabled by default.")]),e._v(" "),o("li",[e._v("HTTP gateway with subdomain support for origin isolation between content roots.")]),e._v(" "),o("li",[e._v("Various "),o("a",{attrs:{href:"https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("experimental features"),o("OutboundLink")],1)])]),e._v(" "),o("p",[e._v("See "),o("a",{attrs:{href:"https://docs.ipfs.io/reference/go/api/#working-with-go",target:"_blank",rel:"noopener noreferrer"}},[e._v("API > Working with Go"),o("OutboundLink")],1)]),e._v(" "),o("h3",{attrs:{id:"js-ipfs"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#js-ipfs"}},[e._v("#")]),e._v(" JS-IPFS")]),e._v(" "),o("p",[e._v("The Javascript implementation is designed to run in the browser with a limited set of IPFS capabilities.")]),e._v(" "),o("p",[e._v("Features include:")]),e._v(" "),o("ul",[o("li",[e._v("Can connect to server nodes using secure WebSockets.\n"),o("ul",[o("li",[e._v("WSS requires manual setup of TLS at the server.")])])]),e._v(" "),o("li",[e._v("Can connect to a browser node using WebRTC using a centralized "),o("a",{attrs:{href:"https://github.com/libp2p/js-libp2p-webrtc-star",target:"_blank",rel:"noopener noreferrer"}},[e._v("ws-webrtc-star signaling service"),o("OutboundLink")],1),e._v(".")])]),e._v(" "),o("p",[e._v("Specific limitations of the JS-IPFS implementation are:")]),e._v(" "),o("ul",[o("li",[e._v("Unless using WSS, a JS-IPFS node cannot connect to the main public DHT. They will only connect to other JS-IPFS nodes.")]),e._v(" "),o("li",[e._v("The performance of the DHT is not on-par with the Go-IPFS implementation.")]),e._v(" "),o("li",[e._v("The HTTP gateway is present, but it has no subdomain support (can't open TCP port)")])]),e._v(" "),o("p",[e._v("See "),o("RouterLink",{attrs:{to:"/how-to/command-line-quick-start/#take-your-node-online"}},[e._v("More about IPFS Node")])],1)])}),[],!1,null,null,null);t.default=a.exports}}]);˛Ä